@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// .box { @include border-radius(10px); }

@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// .abs {
//   @include abs-pos(10px, 10px, 5px, 15px);
// }

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// .container {
//   @include clearfix();
// }

$breakpoints: (
  "sm": "only screen and  (min-width: 480px)",
  "md": "only screen and ( min-width: 768px)",
  "lg": "only screen and ( min-width: 992px)",
) !default;

@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

// .foo {
//   @include respond-to('sm') {
//     padding-left: 20px;
//     padding-right: 20px;
//   }
// }

/* 混入接收两个参数 */
@mixin bordered($color, $width) {
  border: $width solid $color;
}
// .myArticle {
//   @include bordered(blue, 1px);  // 调用混入，并传递两个参数
// }
// .myNotes {
//   @include bordered(red, 2px); // 调用混入，并传递两个参数
// }
